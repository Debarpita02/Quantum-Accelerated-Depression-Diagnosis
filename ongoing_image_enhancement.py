# -*- coding: utf-8 -*-
"""Ongoing image enhancement

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XISXlcl63D0_FpPGe4zAQ68WTXEeM5rQ
"""

# Specify the path to your zip file
zip_file_path = '/content/fMRI dataset.zip'

# Unzip the file in the same directory
!unzip -q "/content/fMRI dataset.zip"

# List the contents of the current directory
!ls

# Install necessary libraries
!pip install matplotlib scikit-image

# Import libraries
import matplotlib.pyplot as plt
from skimage import exposure
from PIL import Image
import numpy as np

# Load the fMRI PNG image (replace 'your_image.png' with your file name)
image_path = '/content/model/train/afraid/Chanvol_181slice_1.png'
img = Image.open(image_path)

# Convert the image to a NumPy array
img_array = np.array(img)

# Apply contrast stretching for enhancement
enhanced_img = exposure.rescale_intensity(img_array, in_range=(0, 255), out_range=(0, 255))

# Visualize the original and enhanced images
plt.figure(figsize=(10, 5))

plt.subplot(1, 2, 1)
plt.imshow(img_array, cmap='gray')
plt.title('Original Image')

plt.subplot(1, 2, 2)
plt.imshow(enhanced_img, cmap='gray')
plt.title('Enhanced Image')

plt.show()

# Load the fMRI PNG image (replace 'your_image.png' with your file name)
image_path = '/content/model/train/calm/Chanvol_10slice_1.png'
img = Image.open(image_path)

# Convert the image to a NumPy array
img_array = np.array(img)

# Apply contrast stretching for enhancement
enhanced_img = exposure.rescale_intensity(img_array, in_range=(0, 255), out_range=(0, 255))

# Visualize the original and enhanced images
plt.figure(figsize=(10, 5))

plt.subplot(1, 2, 1)
plt.imshow(img_array, cmap='gray')
plt.title('Original Image')

plt.subplot(1, 2, 2)
plt.imshow(enhanced_img, cmap='gray')
plt.title('Enhanced Image')

plt.show()

# Load the fMRI PNG image (replace 'your_image.png' with your file name)
image_path = '/content/model/train/delighted/Chanvol_101slice_3.png'
img = Image.open(image_path)

# Convert the image to a NumPy array
img_array = np.array(img)

# Apply contrast stretching for enhancement
enhanced_img = exposure.rescale_intensity(img_array, in_range=(0, 255), out_range=(0, 255))

# Visualize the original and enhanced images
plt.figure(figsize=(10, 5))

plt.subplot(1, 2, 1)
plt.imshow(img_array, cmap='gray')
plt.title('Original Image')

plt.subplot(1, 2, 2)
plt.imshow(enhanced_img, cmap='gray')
plt.title('Enhanced Image')

plt.show()

# Load the fMRI PNG image (replace 'your_image.png' with your file name)
image_path = '/content/model/train/depressed/Chanvol_121slice_17.png'
img = Image.open(image_path)

# Convert the image to a NumPy array
img_array = np.array(img)

# Apply contrast stretching for enhancement
enhanced_img = exposure.rescale_intensity(img_array, in_range=(0, 255), out_range=(0, 255))

# Visualize the original and enhanced images
plt.figure(figsize=(10, 5))

plt.subplot(1, 2, 1)
plt.imshow(img_array, cmap='gray')
plt.title('Original Image')

plt.subplot(1, 2, 2)
plt.imshow(enhanced_img, cmap='gray')
plt.title('Enhanced Image')

plt.show()

# Load the fMRI PNG image (replace 'your_image.png' with your file name)
image_path = '/content/model/train/depressed/Chanvol_122slice_2.png'
img = Image.open(image_path)

# Convert the image to a NumPy array
img_array = np.array(img)

# Apply contrast stretching for enhancement
enhanced_img = exposure.rescale_intensity(img_array, in_range=(0, 255), out_range=(0, 255))

# Visualize the original and enhanced images
plt.figure(figsize=(10, 5))

plt.subplot(1, 2, 1)
plt.imshow(img_array, cmap='gray')
plt.title('Original Image')

plt.subplot(1, 2, 2)
plt.imshow(enhanced_img, cmap='gray')
plt.title('Enhanced Image')

plt.show()

# Load the fMRI PNG image (replace 'your_image.png' with your file name)
image_path = '/content/model/train/depressed/Chanvol_62slice_3.png'
img = Image.open(image_path)

# Convert the image to a NumPy array
img_array = np.array(img)

# Apply contrast stretching for enhancement
enhanced_img = exposure.rescale_intensity(img_array, in_range=(0, 255), out_range=(0, 255))

# Visualize the original and enhanced images
plt.figure(figsize=(10, 5))

plt.subplot(1, 2, 1)
plt.imshow(img_array, cmap='gray')
plt.title('Original Image')

plt.subplot(1, 2, 2)
plt.imshow(enhanced_img, cmap='gray')
plt.title('Enhanced Image')

plt.show()

# Load the fMRI PNG image (replace 'your_image.png' with your file name)
image_path = '/content/model/train/excited/Chanvol_161slice_14.png'
img = Image.open(image_path)

# Convert the image to a NumPy array
img_array = np.array(img)

# Apply contrast stretching for enhancement
enhanced_img = exposure.rescale_intensity(img_array, in_range=(0, 255), out_range=(0, 255))

# Visualize the original and enhanced images
plt.figure(figsize=(10, 5))

plt.subplot(1, 2, 1)
plt.imshow(img_array, cmap='gray')
plt.title('Original Image')

plt.subplot(1, 2, 2)
plt.imshow(enhanced_img, cmap='gray')
plt.title('Enhanced Image')

plt.show()

# Install necessary libraries
!pip install matplotlib scikit-image scipy

import matplotlib.pyplot as plt
from skimage import exposure
from PIL import Image
import numpy as np
from scipy.ndimage import gaussian_filter, convolve

# Load the fMRI PNG image (replace 'your_image.png' with your file name)
image_path = '/content/model/train/afraid/Chanvol_181slice_1.png'
img = Image.open(image_path)

img_array = np.array(img)

# Apply contrast stretching for enhancement
enhanced_img = exposure.rescale_intensity(img_array, in_range=(0, 255), out_range=(0, 255))

# Function to apply sharpening filter
def sharpen_image(image, alpha=1.5):
    blurred = gaussian_filter(image, sigma=1)
    sharpened = image + alpha * (image - blurred)
    return np.clip(sharpened, 0, 255)

# Sharpen the enhanced image
sharpened_img = sharpen_image(enhanced_img)

# Visualize the original, enhanced, and sharpened images
plt.figure(figsize=(15, 5))

plt.subplot(1, 3, 1)
plt.imshow(img_array, cmap='gray')
plt.title('Original Image')

plt.subplot(1, 3, 2)
plt.imshow(enhanced_img, cmap='gray')
plt.title('Enhanced Image')

plt.subplot(1, 3, 3)
plt.imshow(sharpened_img, cmap='gray')
plt.title('Sharpened Image')

plt.show()

# Install necessary libraries
!pip install matplotlib scikit-image scipy

# Import libraries
import matplotlib.pyplot as plt
from skimage import exposure
from PIL import Image
import numpy as np
from scipy.ndimage import gaussian_filter, convolve

# Load the fMRI PNG image (replace 'your_image.png' with your file name)
image_path = '/content/model/train/calm/Chanvol_10slice_23.png'
img = Image.open(image_path)

# Convert the image to a NumPy array
img_array = np.array(img)

# Apply contrast stretching for enhancement
enhanced_img = exposure.rescale_intensity(img_array, in_range=(0, 255), out_range=(0, 255))

# Function to apply sharpening filter
def sharpen_image(image, alpha=1.5):
    blurred = gaussian_filter(image, sigma=1)
    sharpened = image + alpha * (image - blurred)
    return np.clip(sharpened, 0, 255)

# Sharpen the enhanced image
sharpened_img = sharpen_image(enhanced_img)

# Visualize the original, enhanced, and sharpened images
plt.figure(figsize=(15, 5))

plt.subplot(1, 3, 1)
plt.imshow(img_array, cmap='gray')
plt.title('Original Image')

plt.subplot(1, 3, 2)
plt.imshow(enhanced_img, cmap='gray')
plt.title('Enhanced Image')

plt.subplot(1, 3, 3)
plt.imshow(sharpened_img, cmap='gray')
plt.title('Sharpened Image')

plt.show()

# Install necessary libraries
!pip install matplotlib scikit-image scipy

# Import libraries
import matplotlib.pyplot as plt
from skimage import exposure
from PIL import Image
import numpy as np
from scipy.ndimage import gaussian_filter, convolve

# Load the fMRI PNG image (replace 'your_image.png' with your file name)
image_path = '/content/model/train/delighted/Chanvol_101slice_23.png'
img = Image.open(image_path)

# Convert the image to a NumPy array
img_array = np.array(img)

# Apply contrast stretching for enhancement
enhanced_img = exposure.rescale_intensity(img_array, in_range=(0, 255), out_range=(0, 255))

# Function to apply sharpening filter
def sharpen_image(image, alpha=1.5):
    blurred = gaussian_filter(image, sigma=1)
    sharpened = image + alpha * (image - blurred)
    return np.clip(sharpened, 0, 255)

# Sharpen the enhanced image
sharpened_img = sharpen_image(enhanced_img)

# Visualize the original, enhanced, and sharpened images
plt.figure(figsize=(15, 5))

plt.subplot(1, 3, 1)
plt.imshow(img_array, cmap='gray')
plt.title('Original Image')

plt.subplot(1, 3, 2)
plt.imshow(enhanced_img, cmap='gray')
plt.title('Enhanced Image')

plt.subplot(1, 3, 3)
plt.imshow(sharpened_img, cmap='gray')
plt.title('Sharpened Image')

plt.show()

# Install necessary libraries
!pip install matplotlib scikit-image scipy

# Import libraries
import matplotlib.pyplot as plt
from skimage import exposure
from PIL import Image
import numpy as np
from scipy.ndimage import gaussian_filter, convolve

# Load the fMRI PNG image (replace 'your_image.png' with your file name)
image_path = '/content/model/train/depressed/Chanvol_121slice_14.png'
img = Image.open(image_path)

# Convert the image to a NumPy array
img_array = np.array(img)

# Apply contrast stretching for enhancement
enhanced_img = exposure.rescale_intensity(img_array, in_range=(0, 255), out_range=(0, 255))

# Function to apply sharpening filter
def sharpen_image(image, alpha=1.5):
    blurred = gaussian_filter(image, sigma=1)
    sharpened = image + alpha * (image - blurred)
    return np.clip(sharpened, 0, 255)

# Sharpen the enhanced image
sharpened_img = sharpen_image(enhanced_img)

# Visualize the original, enhanced, and sharpened images
plt.figure(figsize=(15, 5))

plt.subplot(1, 3, 1)
plt.imshow(img_array, cmap='gray')
plt.title('Original Image')

plt.subplot(1, 3, 2)
plt.imshow(enhanced_img, cmap='gray')
plt.title('Enhanced Image')

plt.subplot(1, 3, 3)
plt.imshow(sharpened_img, cmap='gray')
plt.title('Sharpened Image')

plt.show()

# Install necessary libraries
!pip install matplotlib scikit-image scipy

# Import libraries
import matplotlib.pyplot as plt
from skimage import exposure
from PIL import Image
import numpy as np
from scipy.ndimage import gaussian_filter, convolve

# Load the fMRI PNG image (replace 'your_image.png' with your file name)
image_path = '/content/model/train/depressed/Chanvol_121slice_25.png'
img = Image.open(image_path)

# Convert the image to a NumPy array
img_array = np.array(img)

# Apply contrast stretching for enhancement
enhanced_img = exposure.rescale_intensity(img_array, in_range=(0, 255), out_range=(0, 255))

# Function to apply sharpening filter
def sharpen_image(image, alpha=1.5):
    blurred = gaussian_filter(image, sigma=1)
    sharpened = image + alpha * (image - blurred)
    return np.clip(sharpened, 0, 255)

# Sharpen the enhanced image
sharpened_img = sharpen_image(enhanced_img)

# Visualize the original, enhanced, and sharpened images
plt.figure(figsize=(15, 5))

plt.subplot(1, 3, 1)
plt.imshow(img_array, cmap='gray')
plt.title('Original Image')

plt.subplot(1, 3, 2)
plt.imshow(enhanced_img, cmap='gray')
plt.title('Enhanced Image')

plt.subplot(1, 3, 3)
plt.imshow(sharpened_img, cmap='gray')
plt.title('Sharpened Image')

plt.show()

# Install necessary libraries
!pip install matplotlib scikit-image scipy

# Import libraries
import matplotlib.pyplot as plt
from skimage import exposure
from PIL import Image
import numpy as np
from scipy.ndimage import gaussian_filter, convolve

# Load the fMRI PNG image (replace 'your_image.png' with your file name)
image_path = '/content/model/train/depressed/Chanvol_121slice_29.png'
img = Image.open(image_path)

# Convert the image to a NumPy array
img_array = np.array(img)

# Apply contrast stretching for enhancement
enhanced_img = exposure.rescale_intensity(img_array, in_range=(0, 255), out_range=(0, 255))

# Function to apply sharpening filter
def sharpen_image(image, alpha=1.5):
    blurred = gaussian_filter(image, sigma=1)
    sharpened = image + alpha * (image - blurred)
    return np.clip(sharpened, 0, 255)

# Sharpen the enhanced image
sharpened_img = sharpen_image(enhanced_img)

# Visualize the original, enhanced, and sharpened images
plt.figure(figsize=(15, 5))

plt.subplot(1, 3, 1)
plt.imshow(img_array, cmap='gray')
plt.title('Original Image')

plt.subplot(1, 3, 2)
plt.imshow(enhanced_img, cmap='gray')
plt.title('Enhanced Image')

plt.subplot(1, 3, 3)
plt.imshow(sharpened_img, cmap='gray')
plt.title('Sharpened Image')

plt.show()

# Install necessary libraries
!pip install matplotlib scikit-image scipy

# Import libraries
import matplotlib.pyplot as plt
from skimage import exposure
from PIL import Image
import numpy as np
from scipy.ndimage import gaussian_filter, convolve

# Load the fMRI PNG image (replace 'your_image.png' with your file name)
image_path = '/content/model/train/excited/Chanvol_162slice_12.png'
img = Image.open(image_path)

# Convert the image to a NumPy array
img_array = np.array(img)

# Apply contrast stretching for enhancement
enhanced_img = exposure.rescale_intensity(img_array, in_range=(0, 255), out_range=(0, 255))

# Function to apply sharpening filter
def sharpen_image(image, alpha=1.5):
    blurred = gaussian_filter(image, sigma=1)
    sharpened = image + alpha * (image - blurred)
    return np.clip(sharpened, 0, 255)

# Sharpen the enhanced image
sharpened_img = sharpen_image(enhanced_img)

# Visualize the original, enhanced, and sharpened images
plt.figure(figsize=(15, 5))

plt.subplot(1, 3, 1)
plt.imshow(img_array, cmap='gray')
plt.title('Original Image')

plt.subplot(1, 3, 2)
plt.imshow(enhanced_img, cmap='gray')
plt.title('Enhanced Image')

plt.subplot(1, 3, 3)
plt.imshow(sharpened_img, cmap='gray')
plt.title('Sharpened Image')

plt.show()

# Install necessary libraries (if not already installed)
!pip install matplotlib scikit-image

# Import libraries
import matplotlib.pyplot as plt
from skimage import restoration
from PIL import Image
import numpy as np

# Load the fMRI PNG image (replace 'your_image.png' with your file name)
image_path = '/content/model/train/afraid/Chanvol_181slice_1.png'
img = Image.open(image_path)

# Convert the image to a NumPy array
img_array = np.array(img)

# Add artificial Gaussian noise to the image (you may skip this step if your image already has noise)
noisy_img = img_array + np.random.normal(0, 25, img_array.shape)

# Apply Gaussian denoising for image restoration
restored_img = restoration.denoise_tv_chambolle(noisy_img, weight=0.1, multichannel=False)

# Visualize the original, noisy, and restored images
plt.figure(figsize=(15, 5))

plt.subplot(1, 3, 1)
plt.imshow(img_array, cmap='gray')
plt.title('Original Image')

plt.subplot(1, 3, 2)
plt.imshow(noisy_img, cmap='gray')
plt.title('Noisy Image')

plt.subplot(1, 3, 3)
plt.imshow(restored_img, cmap='gray')
plt.title('Restored Image')

plt.show()

!pip install scipy
# Install necessary libraries
!pip install matplotlib scikit-image scipy

# Import libraries
import matplotlib.pyplot as plt
from skimage import exposure
from scipy.ndimage import gaussian_filter
from PIL import Image
import numpy as np

# Load the fMRI PNG image (replace 'your_image.png' with your file name)
image_path = 'your_image.png'
img = Image.open(image_path)

# Convert the image to a NumPy array
img_array = np.array(img)

# Apply Gaussian filter for noise reduction
smoothed_img = gaussian_filter(img_array, sigma=1)

# Apply contrast stretching for enhancement
enhanced_img = exposure.rescale_intensity(smoothed_img, in_range=(0, 255), out_range=(0, 255))

# Visualize the original, smoothed, and enhanced images
plt.figure(figsize=(15, 5))

plt.subplot(1, 3, 1)
plt.imshow(img_array, cmap='gray')
plt.title('Original Image')

plt.subplot(1, 3, 2)
plt.imshow(smoothed_img, cmap='gray')
plt.title('Smoothed Image (Noise Reduction)')

plt.subplot(1, 3, 3)
plt.imshow(enhanced_img, cmap='gray')
plt.title('Enhanced Image')

plt.show()